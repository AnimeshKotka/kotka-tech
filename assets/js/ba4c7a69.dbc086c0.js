"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[330],{566:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"managing-multiple-github-accounts","metadata":{"permalink":"/kotka-tech/blog/managing-multiple-github-accounts","editUrl":"https://github.com/AnimeshKotka/kotka-tech/tree/main/blog/2024-11-30-Managing-Multiple-GitHub-Accounts.mdx","source":"@site/blog/2024-11-30-Managing-Multiple-GitHub-Accounts.mdx","title":"Managing Multiple GitHub Accounts","description":"Managing Multiple GitHub Accounts with SSH- A Step-by-Step Guide","date":"2024-11-30T00:00:00.000Z","tags":[{"inline":false,"label":"Github","permalink":"/kotka-tech/blog/tags/github","description":"Github description"},{"inline":true,"label":"ssh","permalink":"/kotka-tech/blog/tags/ssh"},{"inline":true,"label":"multiple accounts","permalink":"/kotka-tech/blog/tags/multiple-accounts"}],"readingTime":3.13,"hasTruncateMarker":true,"authors":[{"name":"Animesh Kotka","title":"Full Stack Blockchian Developer","url":"https://kotka.tech","page":{"permalink":"/kotka-tech/blog/authors/all-sebastien-lorber-articles"},"socials":{"x":"https://x.com/animesh_kotka","linkedin":"https://www.linkedin.com/in/animesh-kotka/","github":"https://github.com/AnimeshKotka"},"imageURL":"https://avatars.githubusercontent.com/u/40909527","key":"animesh"}],"frontMatter":{"title":"Managing Multiple GitHub Accounts","description":"Managing Multiple GitHub Accounts with SSH- A Step-by-Step Guide","slug":"managing-multiple-github-accounts","authors":["animesh"],"tags":["github","ssh","multiple accounts"],"image":"https://i.imgur.com/mErPwqL.png","hide_table_of_contents":false},"unlisted":false},"content":"import Tag from \'@site/src/components/Tag\';\\n\\n\\nWorking with multiple GitHub accounts, such as one for work and another for personal projects, can sometimes be tricky. If you\'ve ever tried to clone a repository and accidentally used the wrong account, you know how frustrating it can be. Fortunately, SSH configuration makes managing multiple GitHub accounts seamless.\\n\\nIn this guide, we\u2019ll walk you through setting up and using SSH keys to manage multiple GitHub accounts effectively. By the end, you\'ll be able to clone, push, and pull from repositories using the correct account without hassle.\\n\\n:::tip\\nSSH (Secure Shell) is used in this context to securely authenticate and connect to GitHub repositories using unique SSH keys for different accounts, ensuring seamless management of multiple GitHub profiles.\\n:::\\n\\n{/* truncate */}\\n\\n## 1. Generate Separate SSH Keys for Each Account\\n\\nEach GitHub account should have its own SSH key. Follow these steps to generate the keys:\\n\\n- **Primary GitHub account (e.g., for work):**\\n\\n  ```bash\\n  ssh-keygen -t rsa -b 4096 -C \\"your_official_email@example.com\\" -f ~/.ssh/github-primary\\n  ```\\n\\n- **Secondary GitHub account (e.g., personal):**\\n\\n  ```bash\\n  ssh-keygen -t rsa -b 4096 -C \\"your_personal_email@example.com\\" -f ~/.ssh/github-personal\\n  ```\\n\\nThis creates two key pairs:\\n- `~/.ssh/github-primary` and `~/.ssh/github-primary.pub`\\n- `~/.ssh/github-personal` and `~/.ssh/github-personal.pub`\\n\\n---\\n\\n## 2. Add SSH Keys to the SSH Agent\\n\\nTo ensure the keys are readily available for use, add them to the SSH agent:\\n\\n```bash\\nssh-add ~/.ssh/github-primary\\nssh-add ~/.ssh/github-personal\\n```\\n\\n---\\n\\n## 3. Configure the SSH Config File\\n\\nThe SSH configuration file (`~/.ssh/config`) allows you to map specific SSH keys to different GitHub accounts. Open or create the file:\\n\\n```bash\\nnano ~/.ssh/config\\n```\\n\\nAdd the following entries:\\n\\n```plaintext\\n# Primary GitHub Account (Work)\\nHost github-primary\\n  HostName github.com\\n  User git\\n  IdentityFile ~/.ssh/github-primary\\n\\n# Secondary GitHub Account (Personal)\\nHost github-secondary\\n  HostName github.com\\n  User git\\n  IdentityFile ~/.ssh/github-personal\\n```\\n\\nSave the file and exit. These aliases (`github-primary` and `github-secondary`) will let you specify which SSH key to use when interacting with GitHub.\\n\\n---\\n\\n## 4. Add Public Keys to GitHub Accounts\\n\\nEach SSH key has a corresponding public key (`.pub` file). Add these to your respective GitHub accounts:\\n\\n- Copy the public key for your primary account:\\n\\n  ```bash\\n  cat ~/.ssh/github-primary.pub\\n  ```\\n\\n- Copy the public key for your secondary account:\\n\\n  ```bash\\n  cat ~/.ssh/github-personal.pub\\n  ```\\n\\nLog in to GitHub and navigate to **Settings > SSH and GPG keys > New SSH Key**. Paste the public key and give it a recognizable title.\\n\\n---\\n\\n## 5. Clone Repositories Using Specific Accounts\\n\\nWhen cloning repositories, use the host alias specified in the SSH config file:\\n\\n- **For your primary account:**\\n\\n  ```bash\\n  git clone git@github-primary:organization/repository.git\\n  ```\\n\\n- **For your secondary account:**\\n\\n  ```bash\\n  git clone git@github-secondary:username/repository.git\\n  ```\\n\\nBy specifying `github-primary` or `github-secondary`, Git automatically uses the correct SSH key.\\n\\n---\\n\\n## 6. Update Remote URLs for Existing Repositories\\n\\n<Tag color=\\"#FF5733\\">Important</Tag> If you\'ve already cloned a repository but want to switch to a specific account, update the remote URL:\\n\\n1. Navigate to the repository:\\n\\n   ```bash\\n   cd repository-name\\n   ```\\n\\n2. Update the remote URL:\\n\\n   ```bash\\n   git remote set-url origin git@github-primary:organization/repository.git\\n   ```\\n\\n3. Verify the remote URL:\\n\\n   ```bash\\n   git remote -v\\n   ```\\n\\n---\\n\\n## 7. Test Your Setup\\n\\nTo confirm everything is configured correctly, test the SSH connection for each account:\\n\\n- **Primary account:**\\n\\n  ```bash\\n  ssh -T git@github-primary\\n  ```\\n\\n- **Secondary account:**\\n\\n  ```bash\\n  ssh -T git@github-secondary\\n  ```\\n\\nIf the setup is correct, you\u2019ll see a message like:\\n\\n```plaintext\\nHi <username>! You\'ve successfully authenticated, but GitHub does not provide shell access.\\n```\\n\\n---\\n\\n## Conclusion\\n\\nManaging multiple GitHub accounts doesn\'t have to be complicated. By configuring SSH keys and using a well-structured `~/.ssh/config` file, you can easily switch between accounts and ensure you\'re always using the right credentials for the task at hand.\\n\\nHave questions or run into issues? Feel free to connect, and I\u2019ll be happy to help!"}]}}')}}]);